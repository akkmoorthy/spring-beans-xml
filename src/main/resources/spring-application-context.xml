<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
       xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean id = "helloWorld" class = "com.springexamples.entity.HelloWorld">
        <property name = "message" value = "Hello World!"/>
    </bean>

    <bean id = "contructorInjectionWithOneParam" class = "com.springexamples.entity.Triangle">
        <constructor-arg value="Equilateral"/>
    </bean>

    <bean id = "contructorInjection" class = "com.springexamples.entity.Triangle">
        <constructor-arg value="Equilateral"/>
        <constructor-arg value="10"/>
    </bean>

    <!-- The below one will call the constructor which is of type instead of the
    constructor with height -->
    <bean id = "contructorInjectionWithWrongConstructorCall" class = "com.springexamples.entity.Triangle">
        <constructor-arg value="10"/>
    </bean>

    <!-- The below one will call the constructor which is of height -->
    <bean id = "contructorInjectionWithType" class = "com.springexamples.entity.Triangle">
        <constructor-arg type="int" value="10"/>
    </bean>

    <!-- The below one will call the constructor which is of height -->
    <bean id = "contructorInjectionWithIndex" class = "com.springexamples.entity.Triangle">
        <constructor-arg index="0" value="Equilateral"/>
        <constructor-arg index="1" value="10"/>
    </bean>

    <!-- Object Injection -->
    <bean id = "circle" class = "com.springexamples.entity.Circle">
        <property name = "point1" ref = "point1"/>
        <property name = "point2" ref = "point2"/>
    </bean>

    <bean id = "point1" class = "com.springexamples.entity.Point">
        <property name = "x" value = "10"/>
        <property name = "y" value = "10.5"/>
    </bean>

    <bean id = "point2" class = "com.springexamples.entity.Point">
        <property name = "x" value = "5.5"/>
        <property name = "y" value = "8"/>
    </bean>

    <bean id = "circleWithInnerBeans" class = "com.springexamples.entity.Circle">
        <property name = "point1">
            <bean class = "com.springexamples.entity.Point">
                <property name = "x" value = "5.5"/>
                <property name = "y" value = "8"/>
            </bean>
        </property>
        <property name = "point2">
            <bean id = "point11" class = "com.springexamples.entity.Point">
                <property name = "x" value = "10"/>
                <property name = "y" value = "10.5"/>
            </bean>
        </property>
    </bean>

    <!-- Giving Alias names -->
    <bean id = "alias" class = "com.springexamples.entity.Triangle" name="triangle-alias">
        <constructor-arg index="0" value="Equilateral"/>
        <constructor-arg index="1" value="10"/>
    </bean>

    <alias name="alias" alias="triangle-alias1"/>


    <!-- Reading list values -->
    <bean id = "rectangleList" class = "com.springexamples.entity.Rectangle">
        <property name = "points">
            <list>
                <ref bean="point1"/>
                <ref bean="point2"/>
            </list>
        </property>
    </bean>

    <!-- Autowire by name -->
    <bean id = "autowiringByName" class = "com.springexamples.entity.Circle" autowire="byName">
    </bean>

    <!-- Autowire by Type. In this case, there should be only one bean which is of that type -->
    <bean id = "autowiringByType" class = "com.springexamples.entity.Oval" autowire="byType">
    </bean>

    <bean id = "ovalPoint" class = "com.springexamples.entity.OvalPoint">
        <property name = "x" value = "15.5"/>
        <property name = "y" value = "18"/>
    </bean>

    <!-- Singleton Scopes -->
    <bean id = "singletonScopeBean" class = "com.springexamples.entity.Triangle" scope="singleton">
        <constructor-arg index="0" value="Equilateral"/>
        <constructor-arg index="1" value="10"/>
    </bean>

    <!-- Prototype Scopes -->
    <bean id = "prototypeScopeBean" class = "com.springexamples.entity.Triangle" scope="prototype">
        <constructor-arg index="0" value="Bilateral"/>
        <constructor-arg index="1" value="10"/>
    </bean>

</beans>